'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var _this = undefined;
var delay = function (ms) {
    return new Promise(function (resolve) { return setTimeout(resolve, ms); });
};
var nextFrame = function () {
    return new Promise(function (resolve) {
        requestAnimationFrame(resolve);
    });
};
var randomDelay = function (_a) {
    var min = _a.min, max = _a.max;
    return __awaiter(_this, void 0, void 0, function () {
        var delay, startTime;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    delay = Math.random() * (max - min) + min;
                    startTime = performance.now();
                    _b.label = 1;
                case 1:
                    if (!(performance.now() - startTime < delay)) return [3 /*break*/, 3];
                    return [4 /*yield*/, nextFrame()];
                case 2:
                    _b.sent();
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    });
};
var index = (function (_a) {
    var _b = _a.words, words = _b === void 0 ? [] : _b, _c = _a.min, min = _c === void 0 ? 10 : _c, _d = _a.max, max = _d === void 0 ? 80 : _d, _e = _a.wordDelay, wordDelay = _e === void 0 ? 2000 : _e, _f = _a.eraseDelay, eraseDelay = _f === void 0 ? 1000 : _f;
    var _g = React.useState(0), currentWord = _g[0], setCurrentWord = _g[1];
    var _h = React.useState(""), word = _h[0], setWord = _h[1];
    var string = words[currentWord];
    React.useEffect(function () {
        var erase = function () { return __awaiter(_this, void 0, void 0, function () {
            var i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < string.length)) return [3 /*break*/, 5];
                        return [4 /*yield*/, randomDelay({ min: min, max: max })];
                    case 2:
                        _a.sent();
                        setWord(function (word) { return word.slice(0, word.length - 1); });
                        if (!(i === string.length - 1)) return [3 /*break*/, 4];
                        return [4 /*yield*/, delay(eraseDelay)];
                    case 3:
                        _a.sent();
                        setCurrentWord(function (currentWord) {
                            return currentWord === words.length - 1 ? 0 : currentWord + 1;
                        });
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 1];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        (function () { return __awaiter(_this, void 0, void 0, function () {
            var _loop_1, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _loop_1 = function (i) {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, randomDelay({ min: min, max: max })];
                                    case 1:
                                        _a.sent();
                                        setWord(function (word) { return word + string.charAt(i); });
                                        if (!(i === string.length - 1)) return [3 /*break*/, 3];
                                        return [4 /*yield*/, delay(wordDelay)];
                                    case 2:
                                        _a.sent();
                                        erase();
                                        _a.label = 3;
                                    case 3: return [2 /*return*/];
                                }
                            });
                        };
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < string.length)) return [3 /*break*/, 4];
                        return [5 /*yield**/, _loop_1(i)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        }); })();
    }, [currentWord]);
    return word;
});

exports.default = index;
//# sourceMappingURL=index.js.map
